{
	"info": {
		"_postman_id": "229d515a-e737-481b-9fe4-01d82918d81c",
		"name": "Olha_Trello_Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17641687",
		"_collection_link": "https://dark-meteor-702234.postman.co/workspace/Udemy_Postman_Advance_Grocery-S~932b1b27-24e4-4484-aa4a-5047fced59d5/collection/17641687-229d515a-e737-481b-9fe4-01d82918d81c?action=share&source=collection_link&creator=17641687"
	},
	"item": [
		{
			"name": "Get all Boards",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", () => {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"console.log(pm.response.json().length); /*to see the response array lenght*/\r",
							"let response = pm.response.json();\r",
							"pm.collectionVariables.set(\"idBoard\", response[0].id); /*to save in collection variable first element of response array. In Delete request this Board will be deleted every time*/\r",
							"\r",
							"console.log(response.map(board => board.id));\r",
							"existingBoardsId = response.map(board => board.id);\r",
							"pm.collectionVariables.set(\"existingBoardsId\", existingBoardsId);\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/1/members/me/boards?key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"1",
						"members",
						"me",
						"boards"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", () => {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"let response   /* for 400 response code verification*/\r",
							"\r",
							"pm.test(\"Board is created\", () => { \r",
							"    response = pm.response.json();          /* for 400 response code verification*/\r",
							"\r",
							"    pm.expect(response.name).to.eql(\"Learning Postman\" + \" \" + pm.collectionVariables.get(\"nameBoard\"));          /*name field has nameBoard collection variable value*/\r",
							"    pm.expect(response.name).to.be.a(\"string\");            /*name field is string*/\r",
							"    pm.expect(response.closed).to.be.false;                /*closed field has false value*/\r",
							"     pm.collectionVariables.set(\"idBoard\", response.id);   /*idBoard collection variable creation*/\r",
							"});\r",
							"\r",
							"pm.test(\"Board is private\", () => {\r",
							"response = pm.response.json();      /* for 400 response code verification*/\r",
							"pm.expect(response.prefs.permissionLevel).to.eql(\"private\");\r",
							"});\r",
							"\r",
							"pm.test(\"Calendar is disabled\", () => {\r",
							" response = pm.response.json();     /* for 400 response code verification*/\r",
							"let switcherViews = response.prefs.switcherViews[2];  /*save the third element of switcherViews array in switcherViews variable*/\r",
							"    pm.expect(switcherViews.enabled).to.be.false;\r",
							"});\r",
							"\r",
							"pm.test(\"Calendar is disabled\", () => {\r",
							"    response = pm.response.json();    /* for 400 response code verification*/\r",
							"let calendarView = response.prefs.switcherViews.find(view => view.viewType === \"Calendar\"); \r",
							"pm.expect(calendarView).to.be.an(\"object\");\r",
							"    pm.expect(calendarView.enabled).to.be.false;\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let nameBoard = pm.collectionVariables.get(\"nameBoard\");\r",
							"\r",
							"  if (isNaN(nameBoard)) {\r",
							"nameBoard = 0;\r",
							"  }\r",
							"nameBoard++;\r",
							"\r",
							"pm.collectionVariables.set(\"nameBoard\", nameBoard);\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/1/boards/?name=Learning Postman {{nameBoard}}&key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"1",
						"boards",
						""
					],
					"query": [
						{
							"key": "name",
							"value": "Learning Postman {{nameBoard}}"
						},
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get the single Board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", () => {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/1/boards/:id?key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"1",
						"boards",
						":id"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "{{idBoard}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create TODO list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status code name has string\", () => {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"TO DO list is created\", () =>{\r",
							"let response = pm.response.json();\r",
							"pm.expect(response.name).to.eql(\"TO DO\");\r",
							"pm.expect(response.closed).to.be.false;\r",
							"pm.expect(response.idBoard).to.eql(pm.collectionVariables.get(\"idBoard\"));\r",
							"\r",
							"pm.collectionVariables.set(\"idToDoList\", response.id);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/1/lists?name=TO DO&idBoard={{idBoard}}&key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"1",
						"lists"
					],
					"query": [
						{
							"key": "name",
							"value": "TO DO"
						},
						{
							"key": "idBoard",
							"value": "{{idBoard}}"
						},
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create DONE list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", () => {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"DONE list is created\", () => {\r",
							"   let response = pm.response.json();\r",
							"pm.expect(response.name).to.eql(\"DONE\");\r",
							"pm.expect(response.closed).to.be.false;\r",
							"pm.expect(response.idBoard).to.eql(pm.collectionVariables.get(\"idBoard\"));\r",
							"\r",
							"pm.collectionVariables.set(\"idDoneList\",response.id); \r",
							"}); \r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/1/lists?name=DONE&idBoard={{idBoard}}&key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"1",
						"lists"
					],
					"query": [
						{
							"key": "name",
							"value": "DONE"
						},
						{
							"key": "idBoard",
							"value": "{{idBoard}}"
						},
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a new Card",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", () => {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Card is created\", () => {\r",
							" let response = pm.response.json();\r",
							"pm.expect(response.name).to.eql(\"Olha card name\");\r",
							"pm.expect(response.idList).to.eql(pm.collectionVariables.get(\"idToDoList\"));\r",
							"pm.expect(response.idBoard).to.eql(pm.collectionVariables.get(\"idBoard\"));\r",
							"pm.expect(response.badges.attachmentsByType.trello.card).to.eql(0);\r",
							"\r",
							"pm.collectionVariables.set(\"idCard\", response.id);   \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/1/cards?idList={{idToDoList}}&key={{trelloKey}}&token={{trelloToken}}&name=Olha card name",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"1",
						"cards"
					],
					"query": [
						{
							"key": "idList",
							"value": "{{idToDoList}}"
						},
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						},
						{
							"key": "name",
							"value": "Olha card name"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Lists on a Board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", () => {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/1/boards/:id/lists?key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"1",
						"boards",
						":id",
						"lists"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "{{idBoard}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Move card to DONE list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Status code name has string\", () => {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Card is moved\", () => {\r",
							"let response = pm.response.json();\r",
							"pm.expect(response.name).to.eql(\"Olha card name\");\r",
							"pm.expect(response.idList).to.eql(pm.collectionVariables.get(\"idDoneList\"));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/1/cards/:id?key={{trelloKey}}&token={{trelloToken}}&idList={{idDoneList}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"1",
						"cards",
						":id"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						},
						{
							"key": "idList",
							"value": "{{idDoneList}}"
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "{{idCard}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Status code name has string\", () => {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/1/boards/:id?key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"1",
						"boards",
						":id"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "{{idBoard}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get deleted Board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", () => {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", () => {\r",
							"    pm.response.to.have.status(\"Not Found\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/1/boards/:id?key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"1",
						"boards",
						":id"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "{{idBoard}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://api.trello.com"
		},
		{
			"key": "trelloKey",
			"value": "27e43dd61543a5bd5248015a5e7f0e1c",
			"type": "string"
		},
		{
			"key": "trelloToken",
			"value": "ATTA573cb0f0375b6dc822975c384167421529577ee931a0e4d9700dcb034bc27fd70E2D7AC8",
			"type": "string"
		},
		{
			"key": "idBoard",
			"value": ""
		},
		{
			"key": "idToDoList",
			"value": ""
		},
		{
			"key": "idDoneList",
			"value": ""
		},
		{
			"key": "idCard",
			"value": ""
		},
		{
			"key": "existingBoardsId",
			"value": ""
		},
		{
			"key": "nameBoard",
			"value": ""
		}
	]
}